{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5640619,"sourceType":"datasetVersion","datasetId":3242270}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install transformers torch\n!pip install prophet","metadata":{"_uuid":"985b30ea-88e1-4ded-8734-7d7b1eefcd87","_cell_guid":"d5d136d2-0eb5-41ea-8826-32ad7925d1fa","collapsed":false,"execution":{"iopub.status.busy":"2024-08-08T11:08:26.417125Z","iopub.execute_input":"2024-08-08T11:08:26.417628Z","iopub.status.idle":"2024-08-08T11:09:43.222675Z","shell.execute_reply.started":"2024-08-08T11:08:26.417593Z","shell.execute_reply":"2024-08-08T11:09:43.220974Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from prophet import Prophet\nimport os\ndir_path = '/kaggle/input/yahoo-finance-dataset-2018-2023'\n\n# List all files in the directory\nfiles = os.listdir(dir_path)\nprint(\"Files in directory:\", files)","metadata":{"_uuid":"214e0338-9057-4182-9e30-292223b192d8","_cell_guid":"de91e599-3750-409c-9e37-356d48660613","collapsed":false,"execution":{"iopub.status.busy":"2024-08-08T12:14:16.800831Z","iopub.execute_input":"2024-08-08T12:14:16.801375Z","iopub.status.idle":"2024-08-08T12:14:16.829036Z","shell.execute_reply.started":"2024-08-08T12:14:16.801338Z","shell.execute_reply":"2024-08-08T12:14:16.827193Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Load the Excel file into a DataFrame\nfile_path = '//kaggle/input/yahoo-finance-dataset-2018-2023/yahoo_data.xlsx'\ndf = pd.read_excel(file_path)","metadata":{"_uuid":"c5e62fb3-f7a1-4465-ae8a-9d00b6132051","_cell_guid":"e78f2c31-92f4-472f-98e2-3af7d75ce83b","collapsed":false,"execution":{"iopub.status.busy":"2024-08-08T12:20:20.907015Z","iopub.execute_input":"2024-08-08T12:20:20.907495Z","iopub.status.idle":"2024-08-08T12:20:21.243003Z","shell.execute_reply.started":"2024-08-08T12:20:20.907452Z","shell.execute_reply":"2024-08-08T12:20:21.241325Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"_uuid":"b1043e54-c046-4618-be97-93bd4fd91fb4","_cell_guid":"2ff68714-9220-4a14-8a07-10bf968c6e28","collapsed":false,"execution":{"iopub.status.busy":"2024-08-08T12:20:21.245782Z","iopub.execute_input":"2024-08-08T12:20:21.246259Z","iopub.status.idle":"2024-08-08T12:20:21.266452Z","shell.execute_reply.started":"2024-08-08T12:20:21.246222Z","shell.execute_reply":"2024-08-08T12:20:21.265067Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Convert the 'Date' column to datetime\ndf['Date'] = pd.to_datetime(df['Date'])\n\n# Sort the DataFrame by date\ndf = df.sort_values('Date')\ndf.head()","metadata":{"_uuid":"ee78458a-ec4a-42d5-9c8c-51b05d030675","_cell_guid":"2bf6ee2b-3f7b-49f0-900a-59b1c079a6fd","collapsed":false,"execution":{"iopub.status.busy":"2024-08-08T12:20:21.268385Z","iopub.execute_input":"2024-08-08T12:20:21.268867Z","iopub.status.idle":"2024-08-08T12:20:21.300603Z","shell.execute_reply.started":"2024-08-08T12:20:21.268828Z","shell.execute_reply":"2024-08-08T12:20:21.299374Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Prepare the DataFrame for Prophet\ndf = df.rename(columns={'Date': 'ds', 'Close*': 'y'})\n\n# Instantiate and fit the Prophet model\nmodel = Prophet()\nmodel.fit(df)","metadata":{"_uuid":"7dfa8ebe-cb02-436b-aa53-85c10ce7e060","_cell_guid":"46577e38-958d-44a7-9a76-3c00e64b11dd","collapsed":false,"execution":{"iopub.status.busy":"2024-08-08T12:20:21.303974Z","iopub.execute_input":"2024-08-08T12:20:21.304363Z","iopub.status.idle":"2024-08-08T12:20:22.289733Z","shell.execute_reply.started":"2024-08-08T12:20:21.304333Z","shell.execute_reply":"2024-08-08T12:20:22.288571Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Apply logarithmic transformation to the target variable\ndf['y'] = np.log(df['y'])\n\n# Instantiate and fit the Prophet model\nmodel_log = Prophet(changepoint_prior_scale=0.05, seasonality_mode='multiplicative')\nmodel_log.fit(df[['ds', 'y']])","metadata":{"_uuid":"40272f35-8a3a-40c1-9b33-b1cb03e15951","_cell_guid":"4b6e0cea-9b25-4ed5-a4f3-80c2ecb0062a","collapsed":false,"execution":{"iopub.status.busy":"2024-08-08T12:20:22.290963Z","iopub.execute_input":"2024-08-08T12:20:22.291285Z","iopub.status.idle":"2024-08-08T12:20:24.657413Z","shell.execute_reply.started":"2024-08-08T12:20:22.291259Z","shell.execute_reply":"2024-08-08T12:20:24.655923Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Make a future dataframe for predictions\nfuture_log = model_log.make_future_dataframe(periods=30)\n# Ensure the future dataframe is correctly generated\nprint(future_log.tail())","metadata":{"_uuid":"f9f4f4f1-b846-4aa4-9497-3187a04147c6","_cell_guid":"2142fa60-9465-4c08-8c8b-08c3a2bf49f2","collapsed":false,"execution":{"iopub.status.busy":"2024-08-08T12:20:24.658901Z","iopub.execute_input":"2024-08-08T12:20:24.659252Z","iopub.status.idle":"2024-08-08T12:20:24.669452Z","shell.execute_reply.started":"2024-08-08T12:20:24.659222Z","shell.execute_reply":"2024-08-08T12:20:24.668120Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"forecast_log = model_log.predict(future_log)\n# Ensure the forecast does not contain anomalies\nprint(forecast_log.tail())","metadata":{"_uuid":"cf1d5b7f-5e00-4958-97cd-b8c7b827bb09","_cell_guid":"0c541022-4446-47ce-99eb-f7c41c4a954a","collapsed":false,"execution":{"iopub.status.busy":"2024-08-08T12:20:24.670906Z","iopub.execute_input":"2024-08-08T12:20:24.671386Z","iopub.status.idle":"2024-08-08T12:20:25.343101Z","shell.execute_reply.started":"2024-08-08T12:20:24.671356Z","shell.execute_reply":"2024-08-08T12:20:25.341561Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Reverse the transformation for prediction\nforecast_log['yhat'] = np.exp(forecast_log['yhat'])\nforecast_log['yhat_lower'] = np.exp(forecast_log['yhat_lower'])\nforecast_log['yhat_upper'] = np.exp(forecast_log['yhat_upper'])","metadata":{"_uuid":"66b94f3f-359f-424a-b320-821d96589331","_cell_guid":"9bc18bb8-1a7b-494a-8e99-00dabe613eb4","collapsed":false,"_kg_hide-output":true,"execution":{"iopub.status.busy":"2024-08-08T12:20:25.345357Z","iopub.execute_input":"2024-08-08T12:20:25.346192Z","iopub.status.idle":"2024-08-08T12:20:25.354795Z","shell.execute_reply.started":"2024-08-08T12:20:25.346148Z","shell.execute_reply":"2024-08-08T12:20:25.353561Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Custom plot function\ndef custom_plot(m, forecast, figsize=(10, 6)):\n    \"\"\"Plot the Prophet forecast with custom handling for future Pandas behavior.\"\"\"\n    fcst_t = np.array(forecast['ds'])\n    ax = plt.figure(figsize=figsize).add_subplot(111)\n    ax.plot(np.array(m.history['ds']), np.exp(m.history['y']), 'k.', label='Observed')\n    ax.plot(fcst_t, forecast['yhat'], ls='-', c='#0072B2', label='Forecast')\n    if 'cap' in forecast:\n        ax.plot(fcst_t, forecast['cap'], ls='--', c='k')\n    if m.logistic_floor:\n        ax.plot(fcst_t, forecast['floor'], ls='--', c='k')\n    ax.fill_between(fcst_t, forecast['yhat_lower'], forecast['yhat_upper'], color='#0072B2', alpha=0.2)\n    ax.grid(True)\n    ax.legend()\n    plt.show()\n\n# Use the custom plot function instead of the default one\ncustom_plot(model_log, forecast_log)","metadata":{"_uuid":"46beaf5b-80e6-418f-a9a0-61a701283d06","_cell_guid":"b05d008c-838b-4df9-8242-a3ce6d4a8080","collapsed":false,"execution":{"iopub.status.busy":"2024-08-08T12:20:25.356290Z","iopub.execute_input":"2024-08-08T12:20:25.357313Z","iopub.status.idle":"2024-08-08T12:20:26.418438Z","shell.execute_reply.started":"2024-08-08T12:20:25.357280Z","shell.execute_reply":"2024-08-08T12:20:26.417099Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate the model performance\nhistorical_forecast_log = forecast_log[forecast_log['ds'] <= df['ds'].max()]\nmae_log = mean_absolute_error(np.exp(df['y']), historical_forecast_log['yhat'])\nprint(f'Log-Transformed Mean Absolute Error (MAE): {mae_log}')\n\n# Perform cross-validation\nfrom prophet.diagnostics import cross_validation, performance_metrics\n\ndf_cv_log = cross_validation(model_log, initial='365 days', period='180 days', horizon='365 days')\ndf_p_log = performance_metrics(df_cv_log)","metadata":{"_uuid":"d5742b1a-2060-4343-807f-58f68c7e591e","_cell_guid":"8549437a-819d-4f06-b0e4-66173234aef7","collapsed":false,"execution":{"iopub.status.busy":"2024-08-08T12:20:26.422694Z","iopub.execute_input":"2024-08-08T12:20:26.423227Z","iopub.status.idle":"2024-08-08T12:20:38.865712Z","shell.execute_reply.started":"2024-08-08T12:20:26.423180Z","shell.execute_reply":"2024-08-08T12:20:38.864614Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate performance metrics\nmae_cv_log = df_p_log['mae'].mean()\nrmse_cv_log = df_p_log['rmse'].mean()\nmape_cv_log = df_p_log['mape'].mean()\n\nprint(f'Log-Transformed Mean Absolute Error (MAE) from cross-validation: {mae_cv_log}')\nprint(f'Log-Transformed Root Mean Squared Error (RMSE) from cross-validation: {rmse_cv_log}')\nprint(f'Log-Transformed Mean Absolute Percentage Error (MAPE) from cross-validation: {mape_cv_log}')","metadata":{"_uuid":"43a1a9ff-c425-49a9-854f-5adb54ea3f48","_cell_guid":"d2340806-7feb-4bdd-a729-6e8ad99e3d90","collapsed":false,"execution":{"iopub.status.busy":"2024-08-08T12:20:38.867316Z","iopub.execute_input":"2024-08-08T12:20:38.867704Z","iopub.status.idle":"2024-08-08T12:20:38.875957Z","shell.execute_reply.started":"2024-08-08T12:20:38.867673Z","shell.execute_reply":"2024-08-08T12:20:38.874623Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import mean_absolute_error, mean_squared_error\n# Evaluate the model performance on the original scale\nhistorical_forecast_log = forecast_log[forecast_log['ds'] <= df['ds'].max()]\noriginal_actual = np.exp(df['y'])\noriginal_forecast = historical_forecast_log['yhat']\nmae_original = mean_absolute_error(original_actual, original_forecast)\nrmse_original = np.sqrt(mean_squared_error(original_actual, original_forecast))\nprint(f'Mean Absolute Error (MAE) on original scale: {mae_original}')\nprint(f'Root Mean Squared Error (RMSE) on original scale: {rmse_original}')","metadata":{"_uuid":"88a14746-e91e-4b6f-9ccc-e316678c1e23","_cell_guid":"9999b198-a45c-42e3-95d9-c84c4c3ba09a","collapsed":false,"execution":{"iopub.status.busy":"2024-08-08T12:23:31.519098Z","iopub.execute_input":"2024-08-08T12:23:31.519572Z","iopub.status.idle":"2024-08-08T12:23:31.534050Z","shell.execute_reply.started":"2024-08-08T12:23:31.519525Z","shell.execute_reply":"2024-08-08T12:23:31.532681Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot actual vs. forecasted values over the historical period\nplt.figure(figsize=(10, 6))\nplt.plot(df['ds'], np.exp(df['y']), label='Actual')\nplt.plot(historical_forecast_log['ds'], historical_forecast_log['yhat'], label='Forecasted')\nplt.fill_between(historical_forecast_log['ds'], historical_forecast_log['yhat_lower'], historical_forecast_log['yhat_upper'], color='gray', alpha=0.2)\nplt.xlabel('Date')\nplt.ylabel('Close Price')\nplt.legend()\nplt.title('Actual vs. Forecasted Stock Prices')\nplt.show()","metadata":{"_uuid":"cf426d80-13c7-447d-857a-a77eeb396fae","_cell_guid":"a0e9465a-8c24-4579-abed-c0d9f6b4a1ac","collapsed":false,"execution":{"iopub.status.busy":"2024-08-08T12:20:38.877529Z","iopub.execute_input":"2024-08-08T12:20:38.877942Z","iopub.status.idle":"2024-08-08T12:20:39.319757Z","shell.execute_reply.started":"2024-08-08T12:20:38.877909Z","shell.execute_reply":"2024-08-08T12:20:39.318597Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}